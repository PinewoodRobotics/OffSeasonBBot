plugins {
    id "java"
    id "edu.wpi.first.GradleRIO" version "2025.2.1"
    id "com.google.protobuf" version "0.9.3"
    id "groovy" // Required for ConfigSlurper
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

ext {
    alreadyAdded = []
}

repositories {
    mavenCentral()
    maven {
        url 'https://jitpack.io'
    }
}

def ROBOT_MAIN_CLASS = "frc.robot.Main"

// Define deploy target and artifacts
deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            team = project.frc.getTeamNumber()
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                frcJava(getArtifactTypeClass('FRCJavaArtifact')) {}

                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                }
            }
        }
    }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcJava

wpi.java.debugJni = false

def includeDesktopSupport = false

// Define project dependencies
dependencies {
    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()

    roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
    roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)

    roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
    roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()

    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

buildDynamically("./config.ini")

test {
    useJUnitPlatform()
    systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
}

// Simulation settings
wpi.sim.addGui().defaultEnabled = true
wpi.sim.addDriverstation()

// Create a fat jar (including all dependencies) and set the manifest for WPILib
jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    from sourceSets.main.allSource
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// Set the jar task for deployment
deployArtifact.jarTask = jar
wpi.java.configureExecutableTasks(jar)
wpi.java.configureTestTasks(test)

// Configure the string concatenation setting for inline compilation
tasks.withType(JavaCompile) {
    options.compilerArgs.add '-XDstringConcat=inline'
}

def buildDynamically(configFilePath) {
        exec {
        commandLine "python3", "scripts/clone_and_build_repos.py", "--config-file-path", configFilePath
        standardOutput = new ByteArrayOutputStream()
        errorOutput = new ByteArrayOutputStream()
    }

    def jarFiles = fileTree(dir: "lib/build", include: '*.jar')

    project.afterEvaluate {
        dependencies {
            implementation files(jarFiles)
        }
    }
}

/* TODO
// Task to initialize Node.js environment and create package.json
task initNode {
    description = 'Initialize Node.js environment and create package.json'
    group = 'setup'
    
    doLast {
        def packageJsonContent = '''{
  "name": "2025reefscape-new",
  "version": "1.0.0",
  "main": "index.js",
  "directories": {
    "lib": "lib"
  },
  "scripts": {
    "test": "echo \\"Error: no test specified\\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/PinewoodRobotics/2025Reefscape-NEW.git"
  },
  "author": "",
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/PinewoodRobotics/2025Reefscape-NEW/issues"
  },
  "homepage": "https://github.com/PinewoodRobotics/2025Reefscape-NEW#readme",
  "description": "",
  "devDependencies": {
    "tsx": "^4.19.3"
  }
}'''
        
        def packageJsonFile = file('package.json')
        packageJsonFile.text = packageJsonContent
        println "Created package.json file"
        
        // Install dependencies if npm is available
        try {
            exec {
                commandLine 'npm', 'install'
                ignoreExitValue = true
            }
            println "Installed Node.js dependencies"
        } catch (Exception e) {
            println "npm not found - package.json created but dependencies not installed"
            println "Run 'npm install' manually to install dependencies"
        }
    }
}*/

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.22.2"
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option 'lite'
                }
            }
        }
    }
}

sourceSets {
    main {
        java {
            srcDirs += "$buildDir/generated/source/proto/main/java"
        }
    }
}